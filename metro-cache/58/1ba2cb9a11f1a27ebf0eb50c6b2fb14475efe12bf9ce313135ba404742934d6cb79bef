{"dependencies":[{"name":"../../utils/arrays","data":{"isAsync":false}},{"name":"../../grammar-error","data":{"isAsync":false}},{"name":"../asts","data":{"isAsync":false}},{"name":"../visitor","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var arrays = _$$_REQUIRE(_dependencyMap[0], \"../../utils/arrays\"),\n      GrammarError = _$$_REQUIRE(_dependencyMap[1], \"../../grammar-error\"),\n      asts = _$$_REQUIRE(_dependencyMap[2], \"../asts\"),\n      visitor = _$$_REQUIRE(_dependencyMap[3], \"../visitor\");\n\n  function reportInfiniteRecursion(ast) {\n    var visitedRules = [];\n    var check = visitor.build({\n      rule: function rule(node) {\n        visitedRules.push(node.name);\n        check(node.expression);\n        visitedRules.pop(node.name);\n      },\n      sequence: function sequence(node) {\n        arrays.every(node.elements, function (element) {\n          check(element);\n          return !asts.alwaysConsumesOnSuccess(ast, element);\n        });\n      },\n      rule_ref: function rule_ref(node) {\n        if (arrays.contains(visitedRules, node.name)) {\n          visitedRules.push(node.name);\n          throw new GrammarError(\"Possible infinite loop when parsing (left recursion: \" + visitedRules.join(\" -> \") + \").\", node.location);\n        }\n\n        check(asts.findRule(ast, node.name));\n      }\n    });\n    check(ast);\n  }\n\n  module.exports = reportInfiniteRecursion;\n});","map":[[2,0,1,0],[4,0,3,0],[4,6,3,4,"arrays"],[4,12,3,10],[4,15,3,19,"require"],[4,26,3,26],[4,67,3,0],[5,0,3,0],[5,6,4,4,"GrammarError"],[5,18,4,16],[5,21,4,19,"require"],[5,32,4,26],[5,74,3,0],[6,0,3,0],[6,6,5,4,"asts"],[6,10,5,8],[6,13,5,19,"require"],[6,24,5,26],[6,54,3,0],[7,0,3,0],[7,6,6,4,"visitor"],[7,13,6,11],[7,16,6,19,"require"],[7,27,6,26],[7,60,3,0],[9,0,20,0],[9,11,20,9,"reportInfiniteRecursion"],[9,34,20,0],[9,35,20,33,"ast"],[9,38,20,0],[9,40,20,38],[10,0,21,2],[10,8,21,6,"visitedRules"],[10,20,21,18],[10,23,21,21],[10,25,21,2],[11,0,23,2],[11,8,23,6,"check"],[11,13,23,11],[11,16,23,14,"visitor"],[11,23,23,21],[11,24,23,22,"build"],[11,29,23,14],[11,30,23,28],[12,0,24,4,"rule"],[12,6,24,4,"rule"],[12,10,24,8],[12,12,24,10],[12,26,24,19,"node"],[12,30,24,10],[12,32,24,25],[13,0,25,6,"visitedRules"],[13,8,25,6,"visitedRules"],[13,20,25,18],[13,21,25,19,"push"],[13,25,25,6],[13,26,25,24,"node"],[13,30,25,28],[13,31,25,29,"name"],[13,35,25,6],[14,0,26,6,"check"],[14,8,26,6,"check"],[14,13,26,11],[14,14,26,12,"node"],[14,18,26,16],[14,19,26,17,"expression"],[14,29,26,11],[14,30,26,6],[15,0,27,6,"visitedRules"],[15,8,27,6,"visitedRules"],[15,20,27,18],[15,21,27,19,"pop"],[15,24,27,6],[15,25,27,23,"node"],[15,29,27,27],[15,30,27,28,"name"],[15,34,27,6],[16,0,28,5],[16,7,23,28],[17,0,30,4,"sequence"],[17,6,30,4,"sequence"],[17,14,30,12],[17,16,30,14],[17,34,30,23,"node"],[17,38,30,14],[17,40,30,29],[18,0,31,6,"arrays"],[18,8,31,6,"arrays"],[18,14,31,12],[18,15,31,13,"every"],[18,20,31,6],[18,21,31,19,"node"],[18,25,31,23],[18,26,31,24,"elements"],[18,34,31,6],[18,36,31,34],[18,46,31,43,"element"],[18,53,31,34],[18,55,31,52],[19,0,32,8,"check"],[19,10,32,8,"check"],[19,15,32,13],[19,16,32,14,"element"],[19,23,32,13],[19,24,32,8],[20,0,34,8],[20,17,34,15],[20,18,34,16,"asts"],[20,22,34,20],[20,23,34,21,"alwaysConsumesOnSuccess"],[20,46,34,16],[20,47,34,45,"ast"],[20,50,34,16],[20,52,34,50,"element"],[20,59,34,16],[20,60,34,8],[21,0,35,7],[21,9,31,6],[22,0,36,5],[22,7,23,28],[23,0,38,4,"rule_ref"],[23,6,38,4,"rule_ref"],[23,14,38,12],[23,16,38,14],[23,34,38,23,"node"],[23,38,38,14],[23,40,38,29],[24,0,39,6],[24,12,39,10,"arrays"],[24,18,39,16],[24,19,39,17,"contains"],[24,27,39,10],[24,28,39,26,"visitedRules"],[24,40,39,10],[24,42,39,40,"node"],[24,46,39,44],[24,47,39,45,"name"],[24,51,39,10],[24,52,39,6],[24,54,39,52],[25,0,40,8,"visitedRules"],[25,10,40,8,"visitedRules"],[25,22,40,20],[25,23,40,21,"push"],[25,27,40,8],[25,28,40,26,"node"],[25,32,40,30],[25,33,40,31,"name"],[25,37,40,8],[26,0,42,8],[26,16,42,14],[26,20,42,18,"GrammarError"],[26,32,42,14],[26,33,43,10],[26,91,44,14,"visitedRules"],[26,103,44,26],[26,104,44,27,"join"],[26,108,44,14],[26,109,44,32],[26,115,44,14],[26,116,43,10],[26,119,45,14],[26,123,42,14],[26,125,46,10,"node"],[26,129,46,14],[26,130,46,15,"location"],[26,138,42,14],[26,139,42,8],[27,0,48,7],[29,0,50,6,"check"],[29,8,50,6,"check"],[29,13,50,11],[29,14,50,12,"asts"],[29,18,50,16],[29,19,50,17,"findRule"],[29,27,50,12],[29,28,50,26,"ast"],[29,31,50,12],[29,33,50,31,"node"],[29,37,50,35],[29,38,50,36,"name"],[29,42,50,12],[29,43,50,11],[29,44,50,6],[30,0,51,5],[31,0,23,28],[31,5,23,14],[31,6,23,2],[32,0,54,2,"check"],[32,4,54,2,"check"],[32,9,54,7],[32,10,54,8,"ast"],[32,13,54,7],[32,14,54,2],[33,0,55,1],[35,0,57,0,"module"],[35,2,57,0,"module"],[35,8,57,6],[35,9,57,7,"exports"],[35,16,57,0],[35,19,57,17,"reportInfiniteRecursion"],[35,42,57,0]]},"type":"js/module"}]}