{"dependencies":[{"name":"./_global","data":{"isAsync":false}},{"name":"./_has","data":{"isAsync":false}},{"name":"./_cof","data":{"isAsync":false}},{"name":"./_inherit-if-required","data":{"isAsync":false}},{"name":"./_to-primitive","data":{"isAsync":false}},{"name":"./_fails","data":{"isAsync":false}},{"name":"./_object-gopn","data":{"isAsync":false}},{"name":"./_object-gopd","data":{"isAsync":false}},{"name":"./_object-dp","data":{"isAsync":false}},{"name":"./_string-trim","data":{"isAsync":false}},{"name":"./_object-create","data":{"isAsync":false}},{"name":"./_descriptors","data":{"isAsync":false}},{"name":"./_redefine","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var global = _$$_REQUIRE(_dependencyMap[0], \"./_global\");\n\n  var has = _$$_REQUIRE(_dependencyMap[1], \"./_has\");\n\n  var cof = _$$_REQUIRE(_dependencyMap[2], \"./_cof\");\n\n  var inheritIfRequired = _$$_REQUIRE(_dependencyMap[3], \"./_inherit-if-required\");\n\n  var toPrimitive = _$$_REQUIRE(_dependencyMap[4], \"./_to-primitive\");\n\n  var fails = _$$_REQUIRE(_dependencyMap[5], \"./_fails\");\n\n  var gOPN = _$$_REQUIRE(_dependencyMap[6], \"./_object-gopn\").f;\n\n  var gOPD = _$$_REQUIRE(_dependencyMap[7], \"./_object-gopd\").f;\n\n  var dP = _$$_REQUIRE(_dependencyMap[8], \"./_object-dp\").f;\n\n  var $trim = _$$_REQUIRE(_dependencyMap[9], \"./_string-trim\").trim;\n\n  var NUMBER = 'Number';\n  var $Number = global[NUMBER];\n  var Base = $Number;\n  var proto = $Number.prototype;\n  var BROKEN_COF = cof(_$$_REQUIRE(_dependencyMap[10], \"./_object-create\")(proto)) == NUMBER;\n  var TRIM = 'trim' in String.prototype;\n\n  var toNumber = function toNumber(argument) {\n    var it = toPrimitive(argument, false);\n\n    if (typeof it == 'string' && it.length > 2) {\n      it = TRIM ? it.trim() : $trim(it, 3);\n      var first = it.charCodeAt(0);\n      var third, radix, maxCode;\n\n      if (first === 43 || first === 45) {\n        third = it.charCodeAt(2);\n        if (third === 88 || third === 120) return NaN;\n      } else if (first === 48) {\n        switch (it.charCodeAt(1)) {\n          case 66:\n          case 98:\n            radix = 2;\n            maxCode = 49;\n            break;\n\n          case 79:\n          case 111:\n            radix = 8;\n            maxCode = 55;\n            break;\n\n          default:\n            return +it;\n        }\n\n        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n          code = digits.charCodeAt(i);\n          if (code < 48 || code > maxCode) return NaN;\n        }\n\n        return parseInt(digits, radix);\n      }\n    }\n\n    return +it;\n  };\n\n  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n    $Number = function Number(value) {\n      var it = arguments.length < 1 ? 0 : value;\n      var that = this;\n      return that instanceof $Number && (BROKEN_COF ? fails(function () {\n        proto.valueOf.call(that);\n      }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n    };\n\n    for (var keys = _$$_REQUIRE(_dependencyMap[11], \"./_descriptors\") ? gOPN(Base) : ('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + 'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {\n      if (has(Base, key = keys[j]) && !has($Number, key)) {\n        dP($Number, key, gOPD(Base, key));\n      }\n    }\n\n    $Number.prototype = proto;\n    proto.constructor = $Number;\n\n    _$$_REQUIRE(_dependencyMap[12], \"./_redefine\")(global, NUMBER, $Number);\n  }\n});","map":[[2,0,1,0],[4,0,2,0],[4,6,2,4,"global"],[4,12,2,10],[4,15,2,13,"require"],[4,26,2,20],[4,58,2,0],[6,0,3,0],[6,6,3,4,"has"],[6,9,3,7],[6,12,3,10,"require"],[6,23,3,17],[6,52,3,0],[8,0,4,0],[8,6,4,4,"cof"],[8,9,4,7],[8,12,4,10,"require"],[8,23,4,17],[8,52,4,0],[10,0,5,0],[10,6,5,4,"inheritIfRequired"],[10,23,5,21],[10,26,5,24,"require"],[10,37,5,31],[10,82,5,0],[12,0,6,0],[12,6,6,4,"toPrimitive"],[12,17,6,15],[12,20,6,18,"require"],[12,31,6,25],[12,69,6,0],[14,0,7,0],[14,6,7,4,"fails"],[14,11,7,9],[14,14,7,12,"require"],[14,25,7,19],[14,56,7,0],[16,0,8,0],[16,6,8,4,"gOPN"],[16,10,8,8],[16,13,8,11,"require"],[16,24,8,18],[16,61,8,11],[16,62,8,37,"f"],[16,63,8,0],[18,0,9,0],[18,6,9,4,"gOPD"],[18,10,9,8],[18,13,9,11,"require"],[18,24,9,18],[18,61,9,11],[18,62,9,37,"f"],[18,63,9,0],[20,0,10,0],[20,6,10,4,"dP"],[20,8,10,6],[20,11,10,9,"require"],[20,22,10,16],[20,57,10,9],[20,58,10,33,"f"],[20,59,10,0],[22,0,11,0],[22,6,11,4,"$trim"],[22,11,11,9],[22,14,11,12,"require"],[22,25,11,19],[22,62,11,12],[22,63,11,38,"trim"],[22,67,11,0],[24,0,12,0],[24,6,12,4,"NUMBER"],[24,12,12,10],[24,15,12,13],[24,23,12,0],[25,0,13,0],[25,6,13,4,"$Number"],[25,13,13,11],[25,16,13,14,"global"],[25,22,13,20],[25,23,13,21,"NUMBER"],[25,29,13,20],[25,30,13,0],[26,0,14,0],[26,6,14,4,"Base"],[26,10,14,8],[26,13,14,11,"$Number"],[26,20,14,0],[27,0,15,0],[27,6,15,4,"proto"],[27,11,15,9],[27,14,15,12,"$Number"],[27,21,15,19],[27,22,15,20,"prototype"],[27,31,15,0],[28,0,17,0],[28,6,17,4,"BROKEN_COF"],[28,16,17,14],[28,19,17,17,"cof"],[28,22,17,20],[28,23,17,21,"require"],[28,34,17,28],[28,74,17,21],[28,75,17,49,"proto"],[28,80,17,21],[28,81,17,20],[28,82,17,17],[28,86,17,60,"NUMBER"],[28,92,17,0],[29,0,18,0],[29,6,18,4,"TRIM"],[29,10,18,8],[29,13,18,11],[29,23,18,21,"String"],[29,29,18,27],[29,30,18,28,"prototype"],[29,39,18,0],[31,0,21,0],[31,6,21,4,"toNumber"],[31,14,21,12],[31,17,21,15],[31,26,21,4,"toNumber"],[31,34,21,15],[31,35,21,25,"argument"],[31,43,21,15],[31,45,21,35],[32,0,22,2],[32,8,22,6,"it"],[32,10,22,8],[32,13,22,11,"toPrimitive"],[32,24,22,22],[32,25,22,23,"argument"],[32,33,22,22],[32,35,22,33],[32,40,22,22],[32,41,22,2],[34,0,23,2],[34,8,23,6],[34,15,23,13,"it"],[34,17,23,6],[34,21,23,19],[34,29,23,6],[34,33,23,31,"it"],[34,35,23,33],[34,36,23,34,"length"],[34,42,23,31],[34,45,23,43],[34,46,23,2],[34,48,23,46],[35,0,24,4,"it"],[35,6,24,4,"it"],[35,8,24,6],[35,11,24,9,"TRIM"],[35,15,24,13],[35,18,24,16,"it"],[35,20,24,18],[35,21,24,19,"trim"],[35,25,24,16],[35,27,24,13],[35,30,24,28,"$trim"],[35,35,24,33],[35,36,24,34,"it"],[35,38,24,33],[35,40,24,38],[35,41,24,33],[35,42,24,4],[36,0,25,4],[36,10,25,8,"first"],[36,15,25,13],[36,18,25,16,"it"],[36,20,25,18],[36,21,25,19,"charCodeAt"],[36,31,25,16],[36,32,25,30],[36,33,25,16],[36,34,25,4],[37,0,26,4],[37,10,26,8,"third"],[37,15,26,4],[37,17,26,15,"radix"],[37,22,26,4],[37,24,26,22,"maxCode"],[37,31,26,4],[39,0,27,4],[39,10,27,8,"first"],[39,15,27,13],[39,20,27,18],[39,22,27,8],[39,26,27,24,"first"],[39,31,27,29],[39,36,27,34],[39,38,27,4],[39,40,27,38],[40,0,28,6,"third"],[40,8,28,6,"third"],[40,13,28,11],[40,16,28,14,"it"],[40,18,28,16],[40,19,28,17,"charCodeAt"],[40,29,28,14],[40,30,28,28],[40,31,28,14],[40,32,28,6],[41,0,29,6],[41,12,29,10,"third"],[41,17,29,15],[41,22,29,20],[41,24,29,10],[41,28,29,26,"third"],[41,33,29,31],[41,38,29,36],[41,41,29,6],[41,43,29,41],[41,50,29,48,"NaN"],[41,53,29,41],[42,0,30,5],[42,7,27,4],[42,13,30,11],[42,17,30,15,"first"],[42,22,30,20],[42,27,30,25],[42,29,30,11],[42,31,30,29],[43,0,31,6],[43,16,31,14,"it"],[43,18,31,16],[43,19,31,17,"charCodeAt"],[43,29,31,14],[43,30,31,28],[43,31,31,14],[43,32,31,6],[44,0,32,8],[44,15,32,13],[44,17,32,8],[45,0,32,17],[45,15,32,22],[45,17,32,17],[46,0,32,26,"radix"],[46,12,32,26,"radix"],[46,17,32,31],[46,20,32,34],[46,21,32,26],[47,0,32,37,"maxCode"],[47,12,32,37,"maxCode"],[47,19,32,44],[47,22,32,47],[47,24,32,37],[48,0,32,51],[50,0,33,8],[50,15,33,13],[50,17,33,8],[51,0,33,17],[51,15,33,22],[51,18,33,17],[52,0,33,27,"radix"],[52,12,33,27,"radix"],[52,17,33,32],[52,20,33,35],[52,21,33,27],[53,0,33,38,"maxCode"],[53,12,33,38,"maxCode"],[53,19,33,45],[53,22,33,48],[53,24,33,38],[54,0,33,52],[56,0,34,8],[57,0,34,17],[57,19,34,24],[57,20,34,25,"it"],[57,22,34,17],[58,0,31,6],[60,0,36,6],[60,13,36,11],[60,17,36,15,"digits"],[60,23,36,21],[60,26,36,24,"it"],[60,28,36,26],[60,29,36,27,"slice"],[60,34,36,24],[60,35,36,33],[60,36,36,24],[60,37,36,11],[60,39,36,37,"i"],[60,40,36,38],[60,43,36,41],[60,44,36,11],[60,46,36,44,"l"],[60,47,36,45],[60,50,36,48,"digits"],[60,56,36,54],[60,57,36,55,"length"],[60,63,36,11],[60,65,36,63,"code"],[60,69,36,6],[60,71,36,69,"i"],[60,72,36,70],[60,75,36,73,"l"],[60,76,36,6],[60,78,36,76,"i"],[60,79,36,77],[60,81,36,6],[60,83,36,81],[61,0,37,8,"code"],[61,10,37,8,"code"],[61,14,37,12],[61,17,37,15,"digits"],[61,23,37,21],[61,24,37,22,"charCodeAt"],[61,34,37,15],[61,35,37,33,"i"],[61,36,37,15],[61,37,37,8],[62,0,40,8],[62,14,40,12,"code"],[62,18,40,16],[62,21,40,19],[62,23,40,12],[62,27,40,25,"code"],[62,31,40,29],[62,34,40,32,"maxCode"],[62,41,40,8],[62,43,40,41],[62,50,40,48,"NaN"],[62,53,40,41],[63,0,41,7],[65,0,41,8],[65,15,41,15,"parseInt"],[65,23,41,23],[65,24,41,24,"digits"],[65,30,41,23],[65,32,41,32,"radix"],[65,37,41,23],[65,38,41,8],[66,0,42,5],[67,0,43,3],[69,0,43,4],[69,11,43,11],[69,12,43,12,"it"],[69,14,43,4],[70,0,44,1],[70,3,21,0],[72,0,46,0],[72,6,46,4],[72,7,46,5,"$Number"],[72,14,46,12],[72,15,46,13],[72,21,46,12],[72,22,46,4],[72,26,46,24],[72,27,46,25,"$Number"],[72,34,46,32],[72,35,46,33],[72,40,46,32],[72,41,46,4],[72,45,46,43,"$Number"],[72,52,46,50],[72,53,46,51],[72,59,46,50],[72,60,46,0],[72,62,46,60],[73,0,47,2,"$Number"],[73,4,47,2,"$Number"],[73,11,47,9],[73,14,47,12],[73,23,47,21,"Number"],[73,29,47,12],[73,30,47,28,"value"],[73,35,47,12],[73,37,47,35],[74,0,48,4],[74,10,48,8,"it"],[74,12,48,10],[74,15,48,13,"arguments"],[74,24,48,22],[74,25,48,23,"length"],[74,31,48,13],[74,34,48,32],[74,35,48,13],[74,38,48,36],[74,39,48,13],[74,42,48,40,"value"],[74,47,48,4],[75,0,49,4],[75,10,49,8,"that"],[75,14,49,12],[75,17,49,15],[75,21,49,4],[76,0,50,4],[76,13,50,11,"that"],[76,17,50,15],[76,29,50,27,"$Number"],[76,36,50,11],[76,41,52,10,"BROKEN_COF"],[76,51,52,20],[76,54,52,23,"fails"],[76,59,52,28],[76,60,52,29],[76,72,52,41],[77,0,52,43,"proto"],[77,8,52,43,"proto"],[77,13,52,48],[77,14,52,49,"valueOf"],[77,21,52,43],[77,22,52,57,"call"],[77,26,52,43],[77,27,52,62,"that"],[77,31,52,43],[78,0,52,70],[78,7,52,28],[78,8,52,20],[78,11,52,74,"cof"],[78,14,52,77],[78,15,52,78,"that"],[78,19,52,77],[78,20,52,74],[78,24,52,87,"NUMBER"],[78,30,50,11],[78,34,53,10,"inheritIfRequired"],[78,51,53,27],[78,52,53,28],[78,56,53,32,"Base"],[78,60,53,28],[78,61,53,37,"toNumber"],[78,69,53,45],[78,70,53,46,"it"],[78,72,53,45],[78,73,53,28],[78,74,53,27],[78,76,53,52,"that"],[78,80,53,27],[78,82,53,58,"$Number"],[78,89,53,27],[78,90,50,11],[78,93,53,69,"toNumber"],[78,101,53,77],[78,102,53,78,"it"],[78,104,53,77],[78,105,50,4],[79,0,54,3],[79,5,47,2],[81,0,55,2],[81,9,55,7],[81,13,55,11,"keys"],[81,17,55,15],[81,20,55,18,"require"],[81,31,55,25],[81,69,55,18],[81,72,55,46,"gOPN"],[81,76,55,50],[81,77,55,51,"Base"],[81,81,55,50],[81,82,55,18],[81,85,55,59],[81,86,57,4],[81,151,59,4],[81,217,57,4],[81,220,60,4],[81,268,55,59],[81,270,61,4,"split"],[81,275,55,59],[81,276,61,10],[81,279,55,59],[81,280,55,7],[81,282,61,16,"j"],[81,283,61,17],[81,286,61,20],[81,287,55,7],[81,289,61,23,"key"],[81,292,55,2],[81,294,61,28,"keys"],[81,298,61,32],[81,299,61,33,"length"],[81,305,61,28],[81,308,61,42,"j"],[81,309,55,2],[81,311,61,45,"j"],[81,312,61,46],[81,314,55,2],[81,316,61,50],[82,0,62,4],[82,10,62,8,"has"],[82,13,62,11],[82,14,62,12,"Base"],[82,18,62,11],[82,20,62,18,"key"],[82,23,62,21],[82,26,62,24,"keys"],[82,30,62,28],[82,31,62,29,"j"],[82,32,62,28],[82,33,62,11],[82,34,62,8],[82,38,62,36],[82,39,62,37,"has"],[82,42,62,40],[82,43,62,41,"$Number"],[82,50,62,40],[82,52,62,50,"key"],[82,55,62,40],[82,56,62,4],[82,58,62,56],[83,0,63,6,"dP"],[83,8,63,6,"dP"],[83,10,63,8],[83,11,63,9,"$Number"],[83,18,63,8],[83,20,63,18,"key"],[83,23,63,8],[83,25,63,23,"gOPD"],[83,29,63,27],[83,30,63,28,"Base"],[83,34,63,27],[83,36,63,34,"key"],[83,39,63,27],[83,40,63,8],[83,41,63,6],[84,0,64,5],[85,0,65,3],[87,0,66,2,"$Number"],[87,4,66,2,"$Number"],[87,11,66,9],[87,12,66,10,"prototype"],[87,21,66,2],[87,24,66,22,"proto"],[87,29,66,2],[88,0,67,2,"proto"],[88,4,67,2,"proto"],[88,9,67,7],[88,10,67,8,"constructor"],[88,21,67,2],[88,24,67,22,"$Number"],[88,31,67,2],[90,0,68,2,"require"],[90,4,68,2,"require"],[90,15,68,9],[90,50,68,2],[90,51,68,25,"global"],[90,57,68,2],[90,59,68,33,"NUMBER"],[90,65,68,2],[90,67,68,41,"$Number"],[90,74,68,2],[91,0,69,1]]},"type":"js/module"}]}