{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/objectSpread","data":{"isAsync":false}},{"name":"./utils/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _objectSpread2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/objectSpread\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./utils/invariant\"));\n\n  var StateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      (0, _invariant.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return (0, _objectSpread2.default)({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return (0, _objectSpread2.default)({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s to jump to', index);\n      return (0, _objectSpread2.default)({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = StateUtils.indexOf(state, key);\n      return StateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? StateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAndPrune: function replaceAndPrune(state, key, route) {\n      var index = StateUtils.indexOf(state, key);\n      var replaced = StateUtils.replaceAtIndex(state, index, route);\n      return (0, _objectSpread2.default)({}, replaced, {\n        routes: replaced.routes.slice(0, index + 1)\n      });\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var index = StateUtils.indexOf(state, key);\n      var nextIndex = preserveIndex ? state.index : index;\n      var nextState = StateUtils.replaceAtIndex(state, index, route);\n      nextState.index = nextIndex;\n      return nextState;\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      (0, _invariant.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route && index === state.index) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return (0, _objectSpread2.default)({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      (0, _invariant.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      (0, _invariant.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return (0, _objectSpread2.default)({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  var _default = StateUtils;\n  exports.default = _default;\n});","map":[[11,0,1,0],[13,0,11,0],[13,6,11,6,"StateUtils"],[13,16,11,16],[13,19,11,19],[14,0,15,2,"get"],[14,4,15,2,"get"],[14,7,11,19],[14,22,15,6,"state"],[14,27,11,19],[14,29,15,13,"key"],[14,32,11,19],[14,34,15,18],[15,0,16,4],[15,13,16,11,"state"],[15,18,16,16],[15,19,16,17,"routes"],[15,25,16,11],[15,26,16,24,"find"],[15,30,16,11],[15,31,16,29],[15,41,16,29,"route"],[15,46,16,34],[16,0,16,34],[16,15,16,38,"route"],[16,20,16,43],[16,21,16,44,"key"],[16,24,16,38],[16,29,16,52,"key"],[16,32,16,34],[17,0,16,34],[17,7,16,11],[17,12,16,60],[17,16,16,4],[18,0,17,3],[18,5,11,19],[19,0,23,2,"indexOf"],[19,4,23,2,"indexOf"],[19,11,11,19],[19,30,23,10,"state"],[19,35,11,19],[19,37,23,17,"key"],[19,40,11,19],[19,42,23,22],[20,0,24,4],[20,13,24,11,"state"],[20,18,24,16],[20,19,24,17,"routes"],[20,25,24,11],[20,26,24,24,"findIndex"],[20,35,24,11],[20,36,24,34],[20,46,24,34,"route"],[20,51,24,39],[21,0,24,39],[21,15,24,43,"route"],[21,20,24,48],[21,21,24,49,"key"],[21,24,24,43],[21,29,24,57,"key"],[21,32,24,39],[22,0,24,39],[22,7,24,11],[22,8,24,4],[23,0,25,3],[23,5,11,19],[24,0,31,2,"has"],[24,4,31,2,"has"],[24,7,11,19],[24,22,31,6,"state"],[24,27,11,19],[24,29,31,13,"key"],[24,32,11,19],[24,34,31,18],[25,0,32,4],[25,13,32,11],[25,14,32,12],[25,15,32,13,"state"],[25,20,32,18],[25,21,32,19,"routes"],[25,27,32,13],[25,28,32,26,"some"],[25,32,32,13],[25,33,32,31],[25,43,32,31,"route"],[25,48,32,36],[26,0,32,36],[26,15,32,40,"route"],[26,20,32,45],[26,21,32,46,"key"],[26,24,32,40],[26,29,32,54,"key"],[26,32,32,36],[27,0,32,36],[27,7,32,13],[27,8,32,4],[28,0,33,3],[28,5,11,19],[29,0,40,2,"push"],[29,4,40,2,"push"],[29,8,11,19],[29,24,40,7,"state"],[29,29,11,19],[29,31,40,14,"route"],[29,36,11,19],[29,38,40,21],[30,0,41,4],[30,30,42,6,"StateUtils"],[30,40,42,16],[30,41,42,17,"indexOf"],[30,48,42,6],[30,49,42,25,"state"],[30,54,42,6],[30,56,42,32,"route"],[30,61,42,37],[30,62,42,38,"key"],[30,65,42,6],[30,71,42,47],[30,72,42,48],[30,73,41,4],[30,75,43,6],[30,121,41,4],[30,123,44,6,"route"],[30,128,44,11],[30,129,44,12,"key"],[30,132,41,4],[31,0,47,4],[31,10,47,10,"routes"],[31,16,47,16],[31,19,47,19,"state"],[31,24,47,24],[31,25,47,25,"routes"],[31,31,47,19],[31,32,47,32,"slice"],[31,37,47,19],[31,39,47,4],[32,0,48,4,"routes"],[32,6,48,4,"routes"],[32,12,48,10],[32,13,48,11,"push"],[32,17,48,4],[32,18,48,16,"route"],[32,23,48,4],[33,0,50,4],[33,45,51,9,"state"],[33,50,50,4],[34,0,52,6,"index"],[34,8,52,6,"index"],[34,13,52,11],[34,15,52,13,"routes"],[34,21,52,19],[34,22,52,20,"length"],[34,28,52,13],[34,31,52,29],[34,32,50,4],[35,0,53,6,"routes"],[35,8,53,6,"routes"],[35,14,53,12],[35,16,53,6,"routes"],[36,0,50,4],[37,0,55,3],[37,5,11,19],[38,0,62,2,"pop"],[38,4,62,2,"pop"],[38,7,11,19],[38,22,62,6,"state"],[38,27,11,19],[38,29,62,13],[39,0,63,4],[39,10,63,8,"state"],[39,15,63,13],[39,16,63,14,"index"],[39,21,63,8],[39,25,63,23],[39,26,63,4],[39,28,63,26],[40,0,65,6],[40,15,65,13,"state"],[40,20,65,6],[41,0,66,5],[43,0,67,4],[43,10,67,10,"routes"],[43,16,67,16],[43,19,67,19,"state"],[43,24,67,24],[43,25,67,25,"routes"],[43,31,67,19],[43,32,67,32,"slice"],[43,37,67,19],[43,38,67,38],[43,39,67,19],[43,41,67,41],[43,42,67,42],[43,43,67,19],[43,44,67,4],[44,0,68,4],[44,45,69,9,"state"],[44,50,68,4],[45,0,70,6,"index"],[45,8,70,6,"index"],[45,13,70,11],[45,15,70,13,"routes"],[45,21,70,19],[45,22,70,20,"length"],[45,28,70,13],[45,31,70,29],[45,32,68,4],[46,0,71,6,"routes"],[46,8,71,6,"routes"],[46,14,71,12],[46,16,71,6,"routes"],[47,0,68,4],[48,0,73,3],[48,5,11,19],[49,0,78,2,"jumpToIndex"],[49,4,78,2,"jumpToIndex"],[49,15,11,19],[49,38,78,14,"state"],[49,43,11,19],[49,45,78,21,"index"],[49,50,11,19],[49,52,78,28],[50,0,79,4],[50,10,79,8,"index"],[50,15,79,13],[50,20,79,18,"state"],[50,25,79,23],[50,26,79,24,"index"],[50,31,79,4],[50,33,79,31],[51,0,80,6],[51,15,80,13,"state"],[51,20,80,6],[52,0,81,5],[54,0,83,4],[54,30,83,14],[54,31,83,15],[54,32,83,16,"state"],[54,37,83,21],[54,38,83,22,"routes"],[54,44,83,16],[54,45,83,29,"index"],[54,50,83,16],[54,51,83,4],[54,53,83,37],[54,82,83,4],[54,84,83,68,"index"],[54,89,83,4],[55,0,85,4],[55,45,86,9,"state"],[55,50,85,4],[56,0,87,6,"index"],[56,8,87,6,"index"],[56,13,87,11],[56,15,87,6,"index"],[57,0,85,4],[58,0,89,3],[58,5,11,19],[59,0,94,2,"jumpTo"],[59,4,94,2,"jumpTo"],[59,10,11,19],[59,28,94,9,"state"],[59,33,11,19],[59,35,94,16,"key"],[59,38,11,19],[59,40,94,21],[60,0,95,4],[60,10,95,10,"index"],[60,15,95,15],[60,18,95,18,"StateUtils"],[60,28,95,28],[60,29,95,29,"indexOf"],[60,36,95,18],[60,37,95,37,"state"],[60,42,95,18],[60,44,95,44,"key"],[60,47,95,18],[60,48,95,4],[61,0,96,4],[61,13,96,11,"StateUtils"],[61,23,96,21],[61,24,96,22,"jumpToIndex"],[61,35,96,11],[61,36,96,34,"state"],[61,41,96,11],[61,43,96,41,"index"],[61,48,96,11],[61,49,96,4],[62,0,97,3],[62,5,11,19],[63,0,102,2,"back"],[63,4,102,2,"back"],[63,8,11,19],[63,24,102,7,"state"],[63,29,11,19],[63,31,102,14],[64,0,103,4],[64,10,103,10,"index"],[64,15,103,15],[64,18,103,18,"state"],[64,23,103,23],[64,24,103,24,"index"],[64,29,103,18],[64,32,103,32],[64,33,103,4],[65,0,104,4],[65,10,104,10,"route"],[65,15,104,15],[65,18,104,18,"state"],[65,23,104,23],[65,24,104,24,"routes"],[65,30,104,18],[65,31,104,31,"index"],[65,36,104,18],[65,37,104,4],[66,0,105,4],[66,13,105,11,"route"],[66,18,105,16],[66,21,105,19,"StateUtils"],[66,31,105,29],[66,32,105,30,"jumpToIndex"],[66,43,105,19],[66,44,105,42,"state"],[66,49,105,19],[66,51,105,49,"index"],[66,56,105,19],[66,57,105,16],[66,60,105,58,"state"],[66,65,105,4],[67,0,106,3],[67,5,11,19],[68,0,111,2,"forward"],[68,4,111,2,"forward"],[68,11,11,19],[68,30,111,10,"state"],[68,35,11,19],[68,37,111,17],[69,0,112,4],[69,10,112,10,"index"],[69,15,112,15],[69,18,112,18,"state"],[69,23,112,23],[69,24,112,24,"index"],[69,29,112,18],[69,32,112,32],[69,33,112,4],[70,0,113,4],[70,10,113,10,"route"],[70,15,113,15],[70,18,113,18,"state"],[70,23,113,23],[70,24,113,24,"routes"],[70,30,113,18],[70,31,113,31,"index"],[70,36,113,18],[70,37,113,4],[71,0,114,4],[71,13,114,11,"route"],[71,18,114,16],[71,21,114,19,"StateUtils"],[71,31,114,29],[71,32,114,30,"jumpToIndex"],[71,43,114,19],[71,44,114,42,"state"],[71,49,114,19],[71,51,114,49,"index"],[71,56,114,19],[71,57,114,16],[71,60,114,58,"state"],[71,65,114,4],[72,0,115,3],[72,5,11,19],[73,0,122,2,"replaceAndPrune"],[73,4,122,2,"replaceAndPrune"],[73,19,11,19],[73,46,122,18,"state"],[73,51,11,19],[73,53,122,25,"key"],[73,56,11,19],[73,58,122,30,"route"],[73,63,11,19],[73,65,122,37],[74,0,123,4],[74,10,123,10,"index"],[74,15,123,15],[74,18,123,18,"StateUtils"],[74,28,123,28],[74,29,123,29,"indexOf"],[74,36,123,18],[74,37,123,37,"state"],[74,42,123,18],[74,44,123,44,"key"],[74,47,123,18],[74,48,123,4],[75,0,124,4],[75,10,124,10,"replaced"],[75,18,124,18],[75,21,124,21,"StateUtils"],[75,31,124,31],[75,32,124,32,"replaceAtIndex"],[75,46,124,21],[75,47,124,47,"state"],[75,52,124,21],[75,54,124,54,"index"],[75,59,124,21],[75,61,124,61,"route"],[75,66,124,21],[75,67,124,4],[76,0,126,4],[76,45,127,9,"replaced"],[76,53,126,4],[77,0,128,6,"routes"],[77,8,128,6,"routes"],[77,14,128,12],[77,16,128,14,"replaced"],[77,24,128,22],[77,25,128,23,"routes"],[77,31,128,14],[77,32,128,30,"slice"],[77,37,128,14],[77,38,128,36],[77,39,128,14],[77,41,128,39,"index"],[77,46,128,44],[77,49,128,47],[77,50,128,14],[78,0,126,4],[79,0,130,3],[79,5,11,19],[80,0,139,2,"replaceAt"],[80,4,139,2,"replaceAt"],[80,13,11,19],[80,34,139,12,"state"],[80,39,11,19],[80,41,139,19,"key"],[80,44,11,19],[80,46,139,24,"route"],[80,51,11,19],[80,53,139,54],[81,0,139,54],[81,10,139,31,"preserveIndex"],[81,23,139,54],[81,94,139,47],[81,99,139,54],[82,0,140,4],[82,10,140,10,"index"],[82,15,140,15],[82,18,140,18,"StateUtils"],[82,28,140,28],[82,29,140,29,"indexOf"],[82,36,140,18],[82,37,140,37,"state"],[82,42,140,18],[82,44,140,44,"key"],[82,47,140,18],[82,48,140,4],[83,0,141,4],[83,10,141,10,"nextIndex"],[83,19,141,19],[83,22,141,22,"preserveIndex"],[83,35,141,35],[83,38,141,38,"state"],[83,43,141,43],[83,44,141,44,"index"],[83,49,141,35],[83,52,141,52,"index"],[83,57,141,4],[84,0,142,4],[84,10,142,8,"nextState"],[84,19,142,17],[84,22,142,20,"StateUtils"],[84,32,142,30],[84,33,142,31,"replaceAtIndex"],[84,47,142,20],[84,48,142,46,"state"],[84,53,142,20],[84,55,142,53,"index"],[84,60,142,20],[84,62,142,60,"route"],[84,67,142,20],[84,68,142,4],[85,0,143,4,"nextState"],[85,6,143,4,"nextState"],[85,15,143,13],[85,16,143,14,"index"],[85,21,143,4],[85,24,143,22,"nextIndex"],[85,33,143,4],[86,0,144,4],[86,13,144,11,"nextState"],[86,22,144,4],[87,0,145,3],[87,5,11,19],[88,0,152,2,"replaceAtIndex"],[88,4,152,2,"replaceAtIndex"],[88,18,11,19],[88,44,152,17,"state"],[88,49,11,19],[88,51,152,24,"index"],[88,56,11,19],[88,58,152,31,"route"],[88,63,11,19],[88,65,152,38],[89,0,153,4],[89,30,154,6],[89,31,154,7],[89,32,154,8,"state"],[89,37,154,13],[89,38,154,14,"routes"],[89,44,154,8],[89,45,154,21,"index"],[89,50,154,8],[89,51,153,4],[89,53,155,6],[89,94,153,4],[89,96,156,6,"index"],[89,101,153,4],[89,103,157,6,"route"],[89,108,157,11],[89,109,157,12,"key"],[89,112,153,4],[91,0,160,4],[91,10,160,8,"state"],[91,15,160,13],[91,16,160,14,"routes"],[91,22,160,8],[91,23,160,21,"index"],[91,28,160,8],[91,34,160,32,"route"],[91,39,160,8],[91,43,160,41,"index"],[91,48,160,46],[91,53,160,51,"state"],[91,58,160,56],[91,59,160,57,"index"],[91,64,160,4],[91,66,160,64],[92,0,161,6],[92,15,161,13,"state"],[92,20,161,6],[93,0,162,5],[95,0,164,4],[95,10,164,10,"routes"],[95,16,164,16],[95,19,164,19,"state"],[95,24,164,24],[95,25,164,25,"routes"],[95,31,164,19],[95,32,164,32,"slice"],[95,37,164,19],[95,39,164,4],[96,0,165,4,"routes"],[96,6,165,4,"routes"],[96,12,165,10],[96,13,165,11,"index"],[96,18,165,10],[96,19,165,4],[96,22,165,20,"route"],[96,27,165,4],[97,0,167,4],[97,45,168,9,"state"],[97,50,167,4],[98,0,169,6,"index"],[98,8,169,6,"index"],[98,13,169,11],[98,15,169,6,"index"],[98,20,167,4],[99,0,170,6,"routes"],[99,8,170,6,"routes"],[99,14,170,12],[99,16,170,6,"routes"],[100,0,167,4],[101,0,172,3],[101,5,11,19],[102,0,179,2,"reset"],[102,4,179,2,"reset"],[102,9,11,19],[102,26,179,8,"state"],[102,31,11,19],[102,33,179,15,"routes"],[102,39,11,19],[102,41,179,23,"index"],[102,46,11,19],[102,48,179,30],[103,0,180,4],[103,30,181,6,"routes"],[103,36,181,12],[103,37,181,13,"length"],[103,43,181,6],[103,47,181,23,"Array"],[103,52,181,28],[103,53,181,29,"isArray"],[103,60,181,23],[103,61,181,37,"routes"],[103,67,181,23],[103,68,180,4],[103,70,182,6],[103,97,180,4],[104,0,185,4],[104,10,185,10,"nextIndex"],[104,19,185,19],[104,22,185,22,"index"],[104,27,185,27],[104,32,185,32,"undefined"],[104,41,185,22],[104,44,185,44,"routes"],[104,50,185,50],[104,51,185,51,"length"],[104,57,185,44],[104,60,185,60],[104,61,185,22],[104,64,185,64,"index"],[104,69,185,4],[106,0,187,4],[106,10,187,8,"state"],[106,15,187,13],[106,16,187,14,"routes"],[106,22,187,8],[106,23,187,21,"length"],[106,29,187,8],[106,34,187,32,"routes"],[106,40,187,38],[106,41,187,39,"length"],[106,47,187,8],[106,51,187,49,"state"],[106,56,187,54],[106,57,187,55,"index"],[106,62,187,49],[106,67,187,65,"nextIndex"],[106,76,187,4],[106,78,187,76],[107,0,188,6],[107,12,188,12,"compare"],[107,19,188,19],[107,22,188,22],[107,31,188,12,"compare"],[107,38,188,22],[107,39,188,23,"route"],[107,44,188,22],[107,46,188,30,"ii"],[107,48,188,22],[108,0,188,22],[108,17,188,37,"routes"],[108,23,188,43],[108,24,188,44,"ii"],[108,26,188,43],[108,27,188,37],[108,32,188,52,"route"],[108,37,188,22],[109,0,188,22],[109,9,188,6],[111,0,189,6],[111,12,189,10,"state"],[111,17,189,15],[111,18,189,16,"routes"],[111,24,189,10],[111,25,189,23,"every"],[111,30,189,10],[111,31,189,29,"compare"],[111,38,189,10],[111,39,189,6],[111,41,189,39],[112,0,190,8],[112,17,190,15,"state"],[112,22,190,8],[113,0,191,7],[114,0,192,5],[116,0,194,4],[116,30,194,14],[116,31,194,15],[116,32,194,16,"routes"],[116,38,194,22],[116,39,194,23,"nextIndex"],[116,48,194,22],[116,49,194,4],[116,51,194,35],[116,78,194,4],[116,80,194,64,"nextIndex"],[116,89,194,4],[117,0,196,4],[117,45,197,9,"state"],[117,50,196,4],[118,0,198,6,"index"],[118,8,198,6,"index"],[118,13,198,11],[118,15,198,13,"nextIndex"],[118,24,196,4],[119,0,199,6,"routes"],[119,8,199,6,"routes"],[119,14,199,12],[119,16,199,6,"routes"],[120,0,196,4],[121,0,201,3],[122,0,11,19],[122,3,11,0],[123,17,204,15,"StateUtils"],[123,27]]},"type":"js/module"}]}