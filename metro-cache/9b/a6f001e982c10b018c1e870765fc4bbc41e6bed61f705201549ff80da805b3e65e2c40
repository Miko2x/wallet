{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"react","data":{"isAsync":false}},{"name":"lodash","data":{"isAsync":false}},{"name":"color","data":{"isAsync":false}},{"name":"./extractOpacity","data":{"isAsync":false}},{"name":"./extractTransform","data":{"isAsync":false}},{"name":"../units","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _default;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _react = _$$_REQUIRE(_dependencyMap[3], \"react\");\n\n  var _lodash = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"lodash\"));\n\n  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"color\"));\n\n  var _extractOpacity = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./extractOpacity\"));\n\n  var _extractTransform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./extractTransform\"));\n\n  var _units = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../units\"));\n\n  var percentReg = /^([+\\-]?\\d+(?:\\.\\d+)?(?:[eE][+\\-]?\\d+)?)(%?)$/;\n\n  function percentToFloat(percent) {\n    if (typeof percent === 'number') {\n      return percent;\n    }\n\n    var matched = percent.match(percentReg);\n\n    if (!matched) {\n      console.warn(\"`\" + percent + \"` is not a valid number or percentage string.\");\n      return 0;\n    }\n\n    return matched[2] ? matched[1] / 100 : +matched[1];\n  }\n\n  function _default(props) {\n    if (!props.id) {\n      return null;\n    }\n\n    var stops = {};\n\n    _react.Children.forEach(props.children, function (_ref) {\n      var _ref$props = _ref.props,\n          offset = _ref$props.offset,\n          stopColor = _ref$props.stopColor,\n          stopOpacity = _ref$props.stopOpacity;\n      offset = percentToFloat(offset);\n\n      if (stopColor && !isNaN(offset)) {\n        stops[offset] = (0, _color.default)(stopColor).alpha((0, _extractOpacity.default)(stopOpacity));\n      }\n    });\n\n    var sorted = _lodash.default.sortBy(_lodash.default.map(stops, function (stop, offset) {\n      return {\n        stop: stop,\n        offset: offset\n      };\n    }), \"offset\");\n\n    var gradient = [];\n    sorted.forEach(function (_ref2) {\n      var stop = _ref2.stop;\n\n      var _stop$rgb$array = stop.rgb().array(),\n          _stop$rgb$array2 = (0, _slicedToArray2.default)(_stop$rgb$array, 4),\n          r = _stop$rgb$array2[0],\n          g = _stop$rgb$array2[1],\n          b = _stop$rgb$array2[2],\n          _stop$rgb$array2$ = _stop$rgb$array2[3],\n          a = _stop$rgb$array2$ === void 0 ? 1 : _stop$rgb$array2$;\n\n      gradient.push(r / 255);\n      gradient.push(g / 255);\n      gradient.push(b / 255);\n      gradient.push(a);\n    });\n    gradient.push.apply(gradient, (0, _toConsumableArray2.default)(sorted.map(function (_ref3) {\n      var offset = _ref3.offset;\n      return +offset;\n    })));\n    var gradientTransform;\n\n    if (props.gradientTransform) {\n      gradientTransform = (0, _extractTransform.default)(props.gradientTransform);\n    } else if (props.transform) {\n      gradientTransform = (0, _extractTransform.default)(props.transform);\n    } else {\n      gradientTransform = (0, _extractTransform.default)(props);\n    }\n\n    return {\n      gradient: gradient,\n      name: props.id,\n      gradientTransform: gradientTransform,\n      gradientUnits: _units.default[props.gradientUnits] || 0\n    };\n  }\n});","map":[[13,0,1,0],[15,0,2,0],[17,0,3,0],[19,0,5,0],[21,0,6,0],[23,0,7,0],[25,0,9,0],[25,6,9,6,"percentReg"],[25,16,9,16],[25,19,9,19],[25,66,9,0],[27,0,11,0],[27,11,11,9,"percentToFloat"],[27,25,11,0],[27,26,11,24,"percent"],[27,33,11,0],[27,35,11,33],[28,0,12,4],[28,8,12,8],[28,15,12,15,"percent"],[28,22,12,8],[28,27,12,27],[28,35,12,4],[28,37,12,37],[29,0,13,8],[29,13,13,15,"percent"],[29,20,13,8],[30,0,14,5],[32,0,15,4],[32,8,15,10,"matched"],[32,15,15,17],[32,18,15,20,"percent"],[32,25,15,27],[32,26,15,28,"match"],[32,31,15,20],[32,32,15,34,"percentReg"],[32,42,15,20],[32,43,15,4],[34,0,16,4],[34,8,16,8],[34,9,16,9,"matched"],[34,16,16,4],[34,18,16,18],[35,0,17,8,"console"],[35,6,17,8,"console"],[35,13,17,15],[35,14,17,16,"warn"],[35,18,17,8],[35,25,18,17,"percent"],[35,32,17,8],[36,0,20,8],[36,13,20,15],[36,14,20,8],[37,0,21,5],[39,0,23,4],[39,11,23,11,"matched"],[39,18,23,18],[39,19,23,19],[39,20,23,18],[39,21,23,11],[39,24,23,24,"matched"],[39,31,23,31],[39,32,23,32],[39,33,23,31],[39,34,23,24],[39,37,23,37],[39,40,23,11],[39,43,23,43],[39,44,23,44,"matched"],[39,51,23,51],[39,52,23,52],[39,53,23,51],[39,54,23,4],[40,0,24,1],[42,0,26,15],[42,20,26,24,"props"],[42,25,26,15],[42,27,26,31],[43,0,27,4],[43,8,27,8],[43,9,27,9,"props"],[43,14,27,14],[43,15,27,15,"id"],[43,17,27,4],[43,19,27,19],[44,0,28,8],[44,13,28,15],[44,17,28,8],[45,0,29,5],[47,0,31,4],[47,8,31,10,"stops"],[47,13,31,15],[47,16,31,18],[47,18,31,4],[49,0,32,4,"Children"],[49,20,32,13,"forEach"],[49,27,32,4],[49,28,32,21,"props"],[49,33,32,26],[49,34,32,27,"children"],[49,42,32,4],[49,44,32,37],[49,60,38,10],[50,0,38,10],[50,28,33,8,"props"],[50,33,38,10],[51,0,38,10],[51,10,34,12,"offset"],[51,16,38,10],[51,30,34,12,"offset"],[51,36,38,10],[52,0,38,10],[52,10,35,12,"stopColor"],[52,19,38,10],[52,33,35,12,"stopColor"],[52,42,38,10],[53,0,38,10],[53,10,36,12,"stopOpacity"],[53,21,38,10],[53,35,36,12,"stopOpacity"],[53,46,38,10],[54,0,39,8,"offset"],[54,6,39,8,"offset"],[54,12,39,14],[54,15,39,17,"percentToFloat"],[54,29,39,31],[54,30,39,32,"offset"],[54,36,39,31],[54,37,39,8],[56,0,40,8],[56,10,40,12,"stopColor"],[56,19,40,21],[56,23,40,25],[56,24,40,26,"isNaN"],[56,29,40,31],[56,30,40,32,"offset"],[56,36,40,31],[56,37,40,8],[56,39,40,41],[57,0,42,12,"stops"],[57,8,42,12,"stops"],[57,13,42,17],[57,14,42,18,"offset"],[57,20,42,17],[57,21,42,12],[57,24,42,28],[57,44,42,34,"stopColor"],[57,53,42,28],[57,55,42,45,"alpha"],[57,60,42,28],[57,61,43,16],[57,90,43,31,"stopOpacity"],[57,101,43,16],[57,102,42,28],[57,103,42,12],[58,0,45,9],[59,0,46,5],[59,5,32,4],[61,0,48,4],[61,8,48,10,"sorted"],[61,14,48,16],[61,17,48,19,"_"],[61,33,48,21,"sortBy"],[61,39,48,19],[61,40,49,8,"_"],[61,56,49,10,"map"],[61,59,49,8],[61,60,49,14,"stops"],[61,65,49,8],[61,67,49,21],[61,77,49,22,"stop"],[61,81,49,21],[61,83,49,28,"offset"],[61,89,49,21],[61,91,49,39],[62,0,50,12],[62,13,50,19],[63,0,50,21,"stop"],[63,8,50,21,"stop"],[63,12,50,25],[63,14,50,21,"stop"],[63,18,50,19],[64,0,50,27,"offset"],[64,8,50,27,"offset"],[64,14,50,33],[64,16,50,27,"offset"],[65,0,50,19],[65,7,50,12],[66,0,51,9],[66,5,49,8],[66,6,48,19],[66,8,52,8],[66,16,48,19],[66,17,48,4],[68,0,55,4],[68,8,55,10,"gradient"],[68,16,55,18],[68,19,55,21],[68,21,55,4],[69,0,57,4,"sorted"],[69,4,57,4,"sorted"],[69,10,57,10],[69,11,57,11,"forEach"],[69,18,57,4],[69,19,57,19],[69,36,57,33],[70,0,57,33],[70,10,57,22,"stop"],[70,14,57,33],[70,23,57,22,"stop"],[70,27,57,33],[72,0,57,33],[72,28,58,33,"stop"],[72,32,58,37],[72,33,58,38,"rgb"],[72,36,58,33],[72,39,58,44,"array"],[72,44,58,33],[72,46,57,33],[73,0,57,33],[74,0,57,33],[74,10,58,15,"r"],[74,11,57,33],[75,0,57,33],[75,10,58,18,"g"],[75,11,57,33],[76,0,57,33],[76,10,58,21,"b"],[76,11,57,33],[77,0,57,33],[78,0,57,33],[78,10,58,24,"a"],[78,11,57,33],[78,45,58,28],[78,46,57,33],[80,0,59,8,"gradient"],[80,6,59,8,"gradient"],[80,14,59,16],[80,15,59,17,"push"],[80,19,59,8],[80,20,59,22,"r"],[80,21,59,23],[80,24,59,26],[80,27,59,8],[81,0,60,8,"gradient"],[81,6,60,8,"gradient"],[81,14,60,16],[81,15,60,17,"push"],[81,19,60,8],[81,20,60,22,"g"],[81,21,60,23],[81,24,60,26],[81,27,60,8],[82,0,61,8,"gradient"],[82,6,61,8,"gradient"],[82,14,61,16],[82,15,61,17,"push"],[82,19,61,8],[82,20,61,22,"b"],[82,21,61,23],[82,24,61,26],[82,27,61,8],[83,0,62,8,"gradient"],[83,6,62,8,"gradient"],[83,14,62,16],[83,15,62,17,"push"],[83,19,62,8],[83,20,62,22,"a"],[83,21,62,8],[84,0,63,5],[84,5,57,4],[85,0,65,4,"gradient"],[85,4,65,4,"gradient"],[85,12,65,12],[85,13,65,13,"push"],[85,17,65,4],[85,24,65,4,"gradient"],[85,32,65,12],[85,67,65,21,"sorted"],[85,73,65,27],[85,74,65,28,"map"],[85,77,65,21],[85,78,65,32],[86,0,65,32],[86,10,65,35,"offset"],[86,16,65,32],[86,25,65,35,"offset"],[86,31,65,32],[87,0,65,32],[87,13,65,48],[87,14,65,49,"offset"],[87,20,65,32],[88,0,65,32],[88,5,65,21],[88,6,65,12],[88,8,65,4],[89,0,67,4],[89,8,67,8,"gradientTransform"],[89,25,67,4],[91,0,68,4],[91,8,68,8,"props"],[91,13,68,13],[91,14,68,14,"gradientTransform"],[91,31,68,4],[91,33,68,33],[92,0,69,8,"gradientTransform"],[92,6,69,8,"gradientTransform"],[92,23,69,25],[92,26,69,28],[92,57,69,45,"props"],[92,62,69,50],[92,63,69,51,"gradientTransform"],[92,80,69,28],[92,81,69,8],[93,0,70,5],[93,5,68,4],[93,11,70,11],[93,15,70,15,"props"],[93,20,70,20],[93,21,70,21,"transform"],[93,30,70,11],[93,32,70,32],[94,0,71,8,"gradientTransform"],[94,6,71,8,"gradientTransform"],[94,23,71,25],[94,26,71,28],[94,57,71,45,"props"],[94,62,71,50],[94,63,71,51,"transform"],[94,72,71,28],[94,73,71,8],[95,0,72,5],[95,5,70,11],[95,11,72,11],[96,0,73,8,"gradientTransform"],[96,6,73,8,"gradientTransform"],[96,23,73,25],[96,26,73,28],[96,57,73,45,"props"],[96,62,73,28],[96,63,73,8],[97,0,74,5],[99,0,76,4],[99,11,76,11],[100,0,77,8,"gradient"],[100,6,77,8,"gradient"],[100,14,77,16],[100,16,77,8,"gradient"],[100,24,76,11],[101,0,78,8,"name"],[101,6,78,8,"name"],[101,10,78,12],[101,12,78,14,"props"],[101,17,78,19],[101,18,78,20,"id"],[101,20,76,11],[102,0,79,8,"gradientTransform"],[102,6,79,8,"gradientTransform"],[102,23,79,25],[102,25,79,8,"gradientTransform"],[102,42,76,11],[103,0,80,8,"gradientUnits"],[103,6,80,8,"gradientUnits"],[103,19,80,21],[103,21,80,23,"units"],[103,36,80,29,"props"],[103,41,80,34],[103,42,80,35,"gradientUnits"],[103,55,80,23],[103,60,80,53],[104,0,76,11],[104,5,76,4],[105,0,82,1]]},"type":"js/module"}]}