{"dependencies":[{"name":"./_export","data":{"isAsync":false}},{"name":"./_defined","data":{"isAsync":false}},{"name":"./_to-length","data":{"isAsync":false}},{"name":"./_is-regexp","data":{"isAsync":false}},{"name":"./_flags","data":{"isAsync":false}},{"name":"./_iter-create","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var $export = _$$_REQUIRE(_dependencyMap[0], \"./_export\");\n\n  var defined = _$$_REQUIRE(_dependencyMap[1], \"./_defined\");\n\n  var toLength = _$$_REQUIRE(_dependencyMap[2], \"./_to-length\");\n\n  var isRegExp = _$$_REQUIRE(_dependencyMap[3], \"./_is-regexp\");\n\n  var getFlags = _$$_REQUIRE(_dependencyMap[4], \"./_flags\");\n\n  var RegExpProto = RegExp.prototype;\n\n  var $RegExpStringIterator = function $RegExpStringIterator(regexp, string) {\n    this._r = regexp;\n    this._s = string;\n  };\n\n  _$$_REQUIRE(_dependencyMap[5], \"./_iter-create\")($RegExpStringIterator, 'RegExp String', function next() {\n    var match = this._r.exec(this._s);\n\n    return {\n      value: match,\n      done: match === null\n    };\n  });\n\n  $export($export.P, 'String', {\n    matchAll: function matchAll(regexp) {\n      defined(this);\n      if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n      var S = String(this);\n      var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n      var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n      rx.lastIndex = toLength(regexp.lastIndex);\n      return new $RegExpStringIterator(rx, S);\n    }\n  });\n});","map":[[2,0,1,0],[4,0,3,0],[4,6,3,4,"$export"],[4,13,3,11],[4,16,3,14,"require"],[4,27,3,21],[4,59,3,0],[6,0,4,0],[6,6,4,4,"defined"],[6,13,4,11],[6,16,4,14,"require"],[6,27,4,21],[6,60,4,0],[8,0,5,0],[8,6,5,4,"toLength"],[8,14,5,12],[8,17,5,15,"require"],[8,28,5,22],[8,63,5,0],[10,0,6,0],[10,6,6,4,"isRegExp"],[10,14,6,12],[10,17,6,15,"require"],[10,28,6,22],[10,63,6,0],[12,0,7,0],[12,6,7,4,"getFlags"],[12,14,7,12],[12,17,7,15,"require"],[12,28,7,22],[12,59,7,0],[14,0,8,0],[14,6,8,4,"RegExpProto"],[14,17,8,15],[14,20,8,18,"RegExp"],[14,26,8,24],[14,27,8,25,"prototype"],[14,36,8,0],[16,0,10,0],[16,6,10,4,"$RegExpStringIterator"],[16,27,10,25],[16,30,10,28],[16,39,10,4,"$RegExpStringIterator"],[16,60,10,28],[16,61,10,38,"regexp"],[16,67,10,28],[16,69,10,46,"string"],[16,75,10,28],[16,77,10,54],[17,0,11,2],[17,9,11,7,"_r"],[17,11,11,2],[17,14,11,12,"regexp"],[17,20,11,2],[18,0,12,2],[18,9,12,7,"_s"],[18,11,12,2],[18,14,12,12,"string"],[18,20,12,2],[19,0,13,1],[19,3,10,0],[21,0,15,0,"require"],[21,2,15,0,"require"],[21,13,15,7],[21,50,15,0],[21,51,15,26,"$RegExpStringIterator"],[21,72,15,0],[21,74,15,49],[21,89,15,0],[21,91,15,66],[21,100,15,75,"next"],[21,104,15,66],[21,107,15,82],[22,0,16,2],[22,8,16,6,"match"],[22,13,16,11],[22,16,16,14],[22,21,16,19,"_r"],[22,23,16,14],[22,24,16,22,"exec"],[22,28,16,14],[22,29,16,27],[22,34,16,32,"_s"],[22,36,16,14],[22,37,16,2],[24,0,17,2],[24,11,17,9],[25,0,17,11,"value"],[25,6,17,11,"value"],[25,11,17,16],[25,13,17,18,"match"],[25,18,17,9],[26,0,17,25,"done"],[26,6,17,25,"done"],[26,10,17,29],[26,12,17,31,"match"],[26,17,17,36],[26,22,17,41],[27,0,17,9],[27,5,17,2],[28,0,18,1],[28,3,15,0],[30,0,20,0,"$export"],[30,2,20,0,"$export"],[30,9,20,7],[30,10,20,8,"$export"],[30,17,20,15],[30,18,20,16,"P"],[30,19,20,7],[30,21,20,19],[30,29,20,7],[30,31,20,29],[31,0,21,2,"matchAll"],[31,4,21,2,"matchAll"],[31,12,21,10],[31,14,21,12],[31,23,21,21,"matchAll"],[31,31,21,12],[31,32,21,30,"regexp"],[31,38,21,12],[31,40,21,38],[32,0,22,4,"defined"],[32,6,22,4,"defined"],[32,13,22,11],[32,14,22,12],[32,18,22,11],[32,19,22,4],[33,0,23,4],[33,10,23,8],[33,11,23,9,"isRegExp"],[33,19,23,17],[33,20,23,18,"regexp"],[33,26,23,17],[33,27,23,4],[33,29,23,27],[33,35,23,33,"TypeError"],[33,44,23,42],[33,45,23,43,"regexp"],[33,51,23,49],[33,54,23,52],[33,73,23,42],[33,74,23,27],[34,0,24,4],[34,10,24,8,"S"],[34,11,24,9],[34,14,24,12,"String"],[34,20,24,18],[34,21,24,19],[34,25,24,18],[34,26,24,4],[35,0,25,4],[35,10,25,8,"flags"],[35,15,25,13],[35,18,25,16],[35,29,25,27,"RegExpProto"],[35,40,25,16],[35,43,25,41,"String"],[35,49,25,47],[35,50,25,48,"regexp"],[35,56,25,54],[35,57,25,55,"flags"],[35,62,25,47],[35,63,25,16],[35,66,25,64,"getFlags"],[35,74,25,72],[35,75,25,73,"call"],[35,79,25,64],[35,80,25,78,"regexp"],[35,86,25,64],[35,87,25,4],[36,0,26,4],[36,10,26,8,"rx"],[36,12,26,10],[36,15,26,13],[36,19,26,17,"RegExp"],[36,25,26,13],[36,26,26,24,"regexp"],[36,32,26,30],[36,33,26,31,"source"],[36,39,26,13],[36,41,26,39],[36,42,26,40,"flags"],[36,47,26,45],[36,48,26,46,"indexOf"],[36,55,26,40],[36,56,26,54],[36,59,26,40],[36,60,26,39],[36,63,26,61,"flags"],[36,68,26,39],[36,71,26,69],[36,77,26,75,"flags"],[36,82,26,13],[36,83,26,4],[37,0,27,4,"rx"],[37,6,27,4,"rx"],[37,8,27,6],[37,9,27,7,"lastIndex"],[37,18,27,4],[37,21,27,19,"toLength"],[37,29,27,27],[37,30,27,28,"regexp"],[37,36,27,34],[37,37,27,35,"lastIndex"],[37,46,27,27],[37,47,27,4],[38,0,28,4],[38,13,28,11],[38,17,28,15,"$RegExpStringIterator"],[38,38,28,11],[38,39,28,37,"rx"],[38,41,28,11],[38,43,28,41,"S"],[38,44,28,11],[38,45,28,4],[39,0,29,3],[40,0,20,29],[40,3,20,7],[40,4,20,0]]},"type":"js/module"}]}